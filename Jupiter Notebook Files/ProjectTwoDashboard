# @author: matthewtranch_snhu
#
# Use Dash to interact with Python CRUD methods
# to display imported documents from a csv file
# uploaded to MongoDB

# Setup the Jupyter version of Dash
from jupyter_dash import JupyterDash

# Configure the necessary Python module imports for dashboard components
import dash
import dash_leaflet as dl
from dash import Dash, html, dcc, ctx, callback
import plotly.express as px
from dash import dash_table
from dash.dependencies import Input, Output, State
from dash.exceptions import PreventUpdate
import base64

# Configure OS routines
import os

# Configure the plotting routines
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


# Import CRUD Python module file
from AnimalShelter import AnimalShelter

###########################
# Data Manipulation / Model
###########################

# Connection Variables
HOST = 'nv-desktop-services.apporto.com'
PORT = 33485
DB = "AAC"
COL = "animals"
username = "aacuser"
password = "SNHU0324"

# Connect to database via CRUD Module
db = AnimalShelter(username, password, HOST, PORT, DB, COL)

# class read method must support return of list object and accept projection json input
# sending the read method an empty document requests all documents be returned
df = pd.DataFrame.from_records(db.read({}))

# MongoDB v5+ is going to return the '_id' column and that is going to have an 
# invlaid object type of 'ObjectID' - which will cause the data_table to crash - so we remove
# it in the dataframe here. The df.drop command allows us to drop the column. If we do not set
# inplace=True - it will reeturn a new dataframe that does not contain the dropped column(s)
df.drop(columns=['_id'],inplace=True)

## Debug
# print(len(df.to_dict(orient='records')))
# print(df.columns)


#########################
# Dashboard Layout / View
#########################
app = JupyterDash(__name__)

# Grazioso Salvareâ€™s logo
image_filename = 'Grazioso Salvare Logo.png' 
encoded_image = base64.b64encode(open(image_filename, 'rb').read())


app.layout = html.Div([
    # Display logo with image tag for SNHU wedbsite
    html.Center(html.A(html.Img(src='data:image/png;base64,{}'.format(encoded_image.decode()), 
                                style={'height':'25%', 'width':'25%'}), 
                       href='http://www.snhu.edu')),
    html.Center(html.B(html.H2('Grazioso Salvare Dashboard'))),
    html.Hr(),   
    
    # Buttons to select Cats or Dogs
    html.Button(' Cats ', id='button-cat', disabled=False),
    html.Button(' Dogs ', id='button-dog', disabled=False),
    html.Button(' Reset ', id='button-reset', disabled=False),
    html.Hr(),
    
    
    
    # RadioItems for Rescue type select, 'Reset' to be default
    dcc.RadioItems(id='rescue-type',options=[
        {'label':html.Div([' Water Rescue '], style={'color':'Blue', 'padding-left': 5}),
            'value':'water-rescue', 'disabled':False},
        {'label':html.Div([' Mountain or Wilderness Rescue ' ], style={'color': 'Green','padding-left': 5}),
            'value':'mountain-rescue', 'disabled':False},
        {'label':html.Div([' Disaster Rescue or Individual Tracking '], style={'color':'Red','padding-left': 5}),
            'value':'disaster-rescue', 'disabled':False},
        {'label':html.Div([' Reset '], style={'color':'Black','padding-left': 5}),
             'value':'reset-rescue'},
    ], value='reset-rescue', inline=True),
    
    html.Hr(),
    dash_table.DataTable(
        id='datatable-id',
        columns=[
            {"name": i, "id": i, "deletable": False, "selectable": True} for i in df.columns],
        data=df.to_dict('records'),
                         
        # DataTable Interactivity
        editable=False,                             # Disables editing the cells
        style_cell={'textAlign': 'left'},           # Aligns texts to the left
        style_data={'border':'2px solid blue'},     # Changes data table color to blue
        style_header={'border':'2px solid purple'}, # Changes header table to purple
        sort_action='native',                       # Sorting by column
        sort_mode='multi',                          # Enables sorting by multiple columns at a time
        filter_action='native',                     # Enables to filter the columns
        page_action='native',                       # Enables "Next" and "Previous" bottons to display pages
        page_current=0,                             # Sets current page to fist (index 0)
        page_size=10,                               # Sets number of rows per page to 10
        row_selectable = "single",                  # Ability to select one row at a time
        selected_rows=[0]),
    
    # Personal unique Identifier
    html.Div(id="query-out", style={'whiteSpace': 'pre-line'}),
    html.I("Tranchina ", style={'display':'inline-block'}),
    html.Img(src="https://www.kali.org/tools/hash-identifier/images/hash-identifier-logo.svg",
            style={'display':'inline-block', 'height': '2%', 'width':'2%'}),  

    # Sets up the dashboard so that the pie chart and geolocation chart are side-by-side
    html.Hr(),
    html.Div(className='row',
         style={'display' : 'flex'},
             children=[
        html.Div(
            id='graph-id',
            className='col s12 m6',

            ),
        html.Div(
            id='map-id',
            className='col s12 m6',
            )
        ])
])
                

#############################################
# Interaction Between Components / Controller
#############################################


# Callback to update the Dashboard 
@app.callback(
    Output('datatable-id','data'),
    [Input('rescue-type', 'value'),
     Input('button-cat', 'n_clicks'),
     Input('button-dog', 'n_clicks'),
     Input('button-reset', 'n_clicks')
    ])

def update_dashboard(rescue_type, button1, button2, button3):

    # If 'Cat' button is clicked, import only 'Cat' documents
    if 'button-cat'== ctx.triggered_id:
        search = {'animal_type': 'Cat'} 
        
    # If 'Dog' button is clicked, import only 'Dog' documents    
    elif 'button-dog' == ctx.triggered_id:
        search = {'animal_type':'Dog'}
       
    # Filter for Water Rescue type breeds that are Female between 25 and 156 weeks old
    elif rescue_type == 'water-rescue':
        search={'animal_type':'Dog',
                'breed':{'$in':[
                    'Labrador Retriever Mix','Chesapeake Bay Retriever','Newfoundland']},
                'sex_upon_outcome':'Intact Female',
                '$and':[{'age_upon_outcome_in_weeks':{'$gte':26}},
                        {'age_upon_outcome_in_weeks':{'$lte':156}}]
               }
        
    # Filter for Mountain Rescue type breeds that are Male between 26 and 156 weeks old
    elif rescue_type == 'mountain-rescue':
        search={'animal_type':'Dog',
                'breed':{'$in':[
                    'German Shepherd','Alaskan Malamute','Old English Sheepdog',
                    'Siberian Husky','Rottweiler']},
                'sex_upon_outcome':'Intact Male',
                '$and':[{'age_upon_outcome_in_weeks':{'$gte':26}},
                        {'age_upon_outcome_in_weeks':{'$lte':156}}]
               }
        
    # Filter for Disaster Rescue type breeds that are Male between 20 and 300 weeks old
    elif rescue_type == 'disaster-rescue':
        search={'animal_type':'Dog',
                'breed':{'$in':[
                    'Doberman Pinscher','German Shepherd','Golden Retriever',
                    'Bloodhound','Rottweiler']},
                'sex_upon_outcome':'Intact Male',
                '$and':[{'age_upon_outcome_in_weeks':{'$gte':20}},
                        {'age_upon_outcome_in_weeks':{'$lte':300}}]
               }
    
    # On first load or when reset is selected, reload all documents
    elif rescue_type == 'reset-rescue' or 'button-reset' == ctx.triggered_id:
        search={}
    else:
        search={}
     
    df = pd.DataFrame.from_records(db.read(search))
    
    # Cleanup Mongo _id field
    df.drop(columns=['_id'],inplace=True)
    return df.to_dict('records')


###########################################################
# Errors when tried to do multiple Outputs in a callback
# so a seperate callback to disable each button is required
###########################################################

# Callback to disable Cat button if any 'Dog' RadioItem is selected
@app.callback(
     Output('button-cat', 'disabled'),
    [Input('rescue-type', 'value')])

def disable_cat_button(rescue_type):
    if rescue_type != 'reset-rescue':
        return True
    
# Callback to disable Dog button if any 'Dog' RadioItem is selected
@app.callback(
     Output('button-dog', 'disabled'),
    [Input('rescue-type', 'value')])

def disable_dog_button(rescue_type):
    if rescue_type != 'reset-rescue':
        return True
    
# Callback to disable Reset button if any 'Dog' RadioItem is selected
@app.callback(
     Output('button-reset', 'disabled'),
    [Input('rescue-type', 'value')])

def disable_reset_button(rescue_type):
    if rescue_type != 'reset-rescue':
        return True
    
    
    
# Callback to update Pie Chart
@app.callback(
    Output('graph-id', "children"),
    [Input('datatable-id', "derived_virtual_data"),
     Input('rescue-type', 'value'),])

def update_graphs(viewData, rescue_type):
    
    dff = pd.DataFrame.from_dict(viewData)
    
    # Change title of chart when corresponding Rescue is selected
    #############################################################
    if rescue_type == 'water-rescue':
        fig = px.pie(dff, names='breed', title='Types of Water Rescue Breeds')
        fig.update_traces(textposition='inside', textinfo='percent+label')


    elif rescue_type == 'mountain-rescue':
        fig = px.pie(dff, names='breed', title='Types of Mountain Rescue Breeds')
        fig.update_traces(textposition='inside', textinfo='percent+label')

          
    elif rescue_type == 'disaster-rescue':
        fig = px.pie(dff, names='breed', title='Types of Disaster or Individual Tracking Breeds')
        fig.update_traces(textposition='inside', textinfo='percent+label')

    ################################################################
    # Change chart to show all breeds when no specifics are selected
    ################################################################
    elif rescue_type == 'reset-rescue' or 'button-reset' == ctx.triggered_id:
        fig = px.pie(dff, names='breed', title='Total Type of Breeds')
        fig.update_traces(textposition='inside', textinfo='percent+label')
        

    return [
        dcc.Graph(figure=fig)
        ]

    
# This callback will highlight a cell on the data table when the user selects it
@app.callback(
    Output('datatable-id', 'style_data_conditional'),
    [Input('datatable-id', 'selected_columns')]
)
def update_styles(selected_columns):
    if selected_columns is None:
        return 
    else:
        return [{
            'if': { 'column_id': i },
            'background_color': '#D2F3FF'
        } for i in selected_columns]


# This callback will update the geo-location chart for the selected data entry
# derived_virtual_data will be the set of data available from the datatable in the form of 
# a dictionary.
# derived_virtual_selected_rows will be the selected row(s) in the table in the form of
# a list. For this application, we are only permitting single row selection so there is only
# one value in the list.
# The iloc method allows for a row, column notation to pull data from the datatable
@app.callback(
    Output('map-id', "children"),
    [Input('datatable-id', "derived_virtual_data"),
     Input('datatable-id', "derived_virtual_selected_rows")])
def update_map(viewData, index):  
    if viewData is None:
        return
    
    dff = pd.DataFrame.from_dict(viewData)
    
    # Automatically select first row if user doesn't
    if index is None:
        row = 0
    else: 
        row = index[0]
        
    return [
        # Always center map around selected row
        dl.Map(style={'width': '1000px', 'height': '500px'}, center=[dff.iloc[row,13],dff.iloc[row,14]], 
               zoom=10, children=[
            dl.TileLayer(id="base-layer-id"),
            # Marker with tool tip and popup
            # Column 13 and 14 define the grid-coordinates for the map
            # Column 4 defines the breed for the animal
            # Column 9 defines the name of the animal
            dl.Marker(position=[dff.iloc[row,13],dff.iloc[row,14]], children=[
                dl.Tooltip(dff.iloc[row,4]),
                dl.Popup([
                    html.H3("Animal Name"),
                    html.P(dff.iloc[row,9])
                ])
            ])
        ])
    ]



app.run_server(debug=True)
